{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Task from \"./components/Task\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskItems = _useState4[0],\n      setTaskItems = _useState4[1];\n\n  var handleAddTask = function handleAddTask() {\n    Keyboard.dismiss();\n    setTaskItems([].concat(_toConsumableArray(taskItems), [task]));\n    setTask(null);\n  };\n\n  var completeTask = function completeTask(index) {\n    var itemsCopy = _toConsumableArray(taskItems);\n\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: {\n      flexGrow: 1\n    },\n    keyboardShouldPersistTaps: \"handled\"\n  }, React.createElement(View, {\n    style: styles.tasksWrapper\n  }, React.createElement(Text, {\n    style: styles.sectionTitle\n  }, \"Today's tasks\"), React.createElement(View, {\n    style: styles.items\n  }, taskItems.map(function (item, index) {\n    return React.createElement(TouchableOpacity, {\n      key: index,\n      onPress: function onPress() {\n        return completeTask(index);\n      }\n    }, React.createElement(Task, {\n      text: item\n    }));\n  })))), React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n    style: styles.writeTaskWrapper\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: 'Write a task',\n    value: task,\n    onChangeText: function onChangeText(text) {\n      return setTask(text);\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleAddTask();\n    }\n  }, React.createElement(View, {\n    style: styles.addWrapper\n  }, React.createElement(Text, {\n    style: styles.addText\n  }, \"+\")))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED'\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  sectionTitle: {\n    fontSize: 70,\n    fontWeight: 'bold'\n  },\n  items: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    width: 250\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addText: {}\n});","map":{"version":3,"sources":["/home/atifu/Desktop/todolist_app/App.js"],"names":["React","useState","Task","App","task","setTask","taskItems","setTaskItems","handleAddTask","Keyboard","dismiss","completeTask","index","itemsCopy","splice","styles","container","flexGrow","tasksWrapper","sectionTitle","items","map","item","Platform","OS","writeTaskWrapper","input","text","addWrapper","addText","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","fontSize","fontWeight","marginTop","position","bottom","width","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth","height"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { KeyboardAvoidingView, StyleSheet, Text, View, TextInput, TouchableOpacity, Keyboard, ScrollView } from 'react-native';\nimport Task from './components/Task';\n\nexport default function App() {\n  const [task, setTask] = useState();\n  const [taskItems, setTaskItems] = useState([]);\n\n  const handleAddTask = () => {\n    Keyboard.dismiss();\n    setTaskItems([...taskItems, task])\n    setTask(null);\n  }\n\n  const completeTask = (index) => {\n    let itemsCopy = [...taskItems];\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy)\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Added this scroll view to enable scrolling when list gets longer than the page */}\n      <ScrollView\n        contentContainerStyle={{\n          flexGrow: 1\n        }}\n        keyboardShouldPersistTaps='handled'\n      >\n\n      {/* Today's Tasks */}\n      <View style={styles.tasksWrapper}>\n        <Text style={styles.sectionTitle}>Today's tasks</Text>\n        <View style={styles.items}>\n          {/* This is where the tasks will go! */}\n          {\n            taskItems.map((item, index) => {\n              return (\n                <TouchableOpacity key={index}  onPress={() => completeTask(index)}>\n                  <Task text={item} /> \n                </TouchableOpacity>\n              )\n            })\n          }\n        </View>\n      </View>\n        \n      </ScrollView>\n\n      {/* Write a task */}\n      {/* Uses a keyboard avoiding view which ensures the keyboard does not cover the items on screen */}\n      <KeyboardAvoidingView \n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        style={styles.writeTaskWrapper}\n      >\n        <TextInput style={styles.input} placeholder={'Write a task'} value={task} onChangeText={text => setTask(text)} />\n        <TouchableOpacity onPress={() => handleAddTask()}>\n          <View style={styles.addWrapper}>\n            <Text style={styles.addText}>+</Text>\n          </View>\n        </TouchableOpacity>\n      </KeyboardAvoidingView>\n      \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED',\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20,\n  },\n  sectionTitle: {\n    fontSize: 70,\n    fontWeight: 'bold'\n  },\n  items: {\n    marginTop: 30,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    width: 250,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {},\n});\n"]},"metadata":{},"sourceType":"module"}